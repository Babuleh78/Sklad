using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Unity.VisualScripting;

public class Player : MonoBehaviour
{
    public Stats ShipStats; 
    public GameObject bullet;
    public static GameObject Jenia;
    private Vector2 offScreenPos = new Vector2(0, -20f);
    private Vector2 startPos = new Vector2(0, -6.5f);
    private const float MAX_LEFT= -5.5f;
    private const float MAX_RIGHT= 5.5f;
    private bool is_alive;
    
    private bool isShooting;
    private void Start()
    {

       
        is_alive = true;
        Reset();    
        transform.position = startPos;

    }
    void Update()
    
    {
        if (GameManager.is_reset()) { Reset(); GameManager.set_reset(false); }
       if(Input.GetKey(KeyCode.A) && transform.position.x > MAX_LEFT)
        {
            transform.Translate(Vector2.left * Time.deltaTime * ShipStats.speed);
        }
        if (Input.GetKey(KeyCode.D) && transform.position.x < MAX_RIGHT)
        {
            transform.Translate(Vector2.right * Time.deltaTime * ShipStats.speed);
        }
        if(Input.GetKey(KeyCode.Space) && !isShooting)
        {
            StartCoroutine(Shoot());
        }
    }
    private void TakeDamage()
    {
        if (is_alive)
        {
            ShipStats.CurrentHealth--;
            UIManager.UpdHelth(ShipStats.CurrentHealth);
            if (ShipStats.CurrentHealth <= 0)
            {
                AudioManager.PLS();
                ShipStats.currentLives--;
                UIManager.UpdLives(ShipStats.currentLives);
                ShipStats.CurrentHealth = ShipStats.maxHealth;
                UIManager.UpdHelth(ShipStats.CurrentHealth);
                if (ShipStats.currentLives <= 0)
                {
                    SaveManager.SaveProg();
                    is_alive = false;
                    Reset();
                    MenuManager.GameOver();
                }
                else
                {
                    is_alive = false;
                    StartCoroutine(Respawn());
                }
            }
        }
    }
    public void Reset()
    {
        ShipStats.CurrentHealth = ShipStats.maxHealth;
        ShipStats.currentLives = ShipStats.maxLives;
        Inventory.currentCoins = 0;
        UIManager.UpdCoin();
        UIManager.UpdHelth(ShipStats.CurrentHealth);
        UIManager.UpdLives(ShipStats.currentLives);
    }
    private IEnumerator Shoot()
    {
        if (is_alive)
        {
            isShooting = true;
            Instantiate(bullet, transform.position, Quaternion.identity);
            yield return new WaitForSeconds(ShipStats.fireRate);
            isShooting = false;
        }
    }

    private IEnumerator Respawn()
    {
        
        transform.position = offScreenPos;
        yield return new WaitForSeconds(2);
        ShipStats.CurrentHealth = ShipStats.maxHealth;
        is_alive = true;
        UIManager.UpdHelth(ShipStats.CurrentHealth);
        transform.position = startPos;
    }
    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.CompareTag("HBullet"))
        {
            Destroy(collision.gameObject);
            TakeDamage();
        }
    }
   
    public void AddHealth()
    {
        if (ShipStats.CurrentHealth == ShipStats.maxHealth)
        {
            UIManager.UpdScore(250);
        }
        else
        {
            ShipStats.CurrentHealth++;
            UIManager.UpdHelth(ShipStats.CurrentHealth);
        }
    }
    public void AddLife()
    {
        if (ShipStats.currentLives == ShipStats.maxLives)
        {
            UIManager.UpdScore(1000);
        }
        else
        {
            ShipStats.currentLives++;
            UIManager.UpdLives(ShipStats.currentLives);
        }
    }
}
