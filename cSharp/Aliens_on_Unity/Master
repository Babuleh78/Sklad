using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Collections.Generic;
public class MasterOfHohol : MonoBehaviour
{
    public GameObject bullet;
    private Vector3 hMoveDistance = new Vector3(0.05f, 0, 0);
    private Vector3 vMoveDistance = new Vector3(0, 0.15f, 0);
    private Vector3 motherSpawn = new Vector3(3.72f, 3.45f, 0);
    public GameObject mother;
    private const float MAX_LEFT = -3f;
    private const float MAX_RIGHT = 3f;
    private const float MAX_SPEED = 0.02f;
    private bool moveR;
    private float moveTimer = 0.01f;
    private const float moveTime = 0.005f;

    private float motherTimer = 1f;
    private const float MOTHER_MIN = 15;
    private const float MOTHER_MAX = 30;

    private float ShootTimer = 3f;
    private const float ShootTime = 3f;
    public static List<GameObject> allHohols = new List<GameObject>();
    void Start()
    {
        foreach(GameObject go in GameObject.FindGameObjectsWithTag("Hohol"))
            allHohols.Add(go);
    }

    // Update is called once per frame
    void Update()
    {
        if(moveTimer <= 0)
        {
            MoveEnemy();
        }
        if(ShootTimer <= 0)
        {
            Shoot();
        }
        if(motherTimer <= 0)
        {
            SpawnMother();
        }
        moveTimer -= Time.deltaTime;
        ShootTimer-= Time.deltaTime;
        motherTimer -= Time.deltaTime;
    }

    private void SpawnMother()
    {
        Instantiate(mother, motherSpawn, Quaternion.identity);
        motherTimer = Random.Range(MOTHER_MIN, MOTHER_MAX);
    }
    private void MoveEnemy()
    {
        if (allHohols.Count > 0)
        {
            int hitMax = 0;
            for (int i = 0; i < allHohols.Count; i++)
            {
                if (moveR)
                {
                    allHohols[i].transform.position += hMoveDistance;
                }
                else
                {
                    allHohols[i].transform.position -= hMoveDistance;
                }
                if (allHohols[i].transform.position.x > MAX_RIGHT || allHohols[i].transform.position.x < MAX_LEFT)
                {
                    hitMax++;
                }
            }
            if (hitMax > 0)
            {
                for(int i = 0; i < allHohols.Count; i++)
                {
                    allHohols[i].transform.position -= vMoveDistance;
                }
                moveR = !moveR;
            }

            moveTimer = GetMoveSpeed();
        }
    }

    private void Shoot()
    {
        Vector2 pos = allHohols[Random.Range(0, allHohols.Count)].transform.position;
        Instantiate(bullet, pos, Quaternion.identity);
        ShootTimer = ShootTime;
    }
    private float GetMoveSpeed()
    {
        float f = allHohols.Count * moveTime;
        if (f < MAX_SPEED)
        {
            return MAX_SPEED;
        }
        return f;
    }
}
