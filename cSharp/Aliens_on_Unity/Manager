using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEditor.Tilemaps;
using UnityEngine;

public class GameManager : MonoBehaviour
{
    public GameObject line;
    public GameObject TrueLine;
    public static float liney = -5f;
   

    public GameObject currshields;
    public GameObject MaxShield;
    public GameObject[] HoholsSet;
    private static bool need_reset;
    
    private GameObject currentSet;
    
    private Vector2 spawnPos = new Vector2 (0, 10);
    private Vector2 spawnShield = new Vector2(-2.5f, -3);
    private static GameManager instance;
   
    private void Awake()
    {
        if(instance == null)
        {
            instance = this;

        }
        else
        {
            Destroy(gameObject);
        }
    }
    public static void CancelGame()
    {
        instance.StopAllCoroutines();
        foreach (GameObject a in GameObject.FindGameObjectsWithTag("HBullet"))
            Destroy(a);
        foreach (GameObject a in GameObject.FindGameObjectsWithTag("JBullet"))
            Destroy(a);

        MasterOfHohol.allHohols.Clear();
        if(instance.currentSet!= null)
        {
            Destroy(instance.currentSet);
        }
        if (instance.currshields != null)
        {
            Destroy(instance.currshields);
        }
        if (instance.line != null)
        {
            Destroy (instance.line);
        }
        
        UIManager.ResetUI();
    }
    
    public IEnumerator SpawnLine()
    {
        if(line!= null)
        {
            Destroy(line);
        }
        yield return new WaitForSeconds(2);
        Vector2 spawnPos = new Vector2(0, liney);
        line  = Instantiate(TrueLine, spawnPos, Quaternion.identity);
    }
    public static void SpawnNewLine()
    {
        instance.StartCoroutine(instance.SpawnLine());
    }
    public static void SpawnNewShields()
    {

        instance.StartCoroutine(instance.SpawnShields());

    }
    public static bool is_reset()
    {
        return need_reset;
    }
    public static void set_reset(bool f)
    {
        need_reset = f;
    }
    public static void SpawnNewWave()
    {
       
        MasterOfHohol.allHohols.Clear();
        
        instance.StartCoroutine(instance.SpawnWave());
    }
    private IEnumerator SpawnShields()
    {
        
        if (currshields!= null)
        {
            Destroy(currshields);
        }
        yield return new WaitForSeconds(2);
        currshields = Instantiate(MaxShield, spawnShield, Quaternion.identity);
    }
    private IEnumerator SpawnWave()
    {
        int number = Random.Range(0, HoholsSet.Length);
        spawnPos = HoholsSet[number].GetComponent<MasterOfHohol>().spawnPos;
        if(currentSet != null)
        {
            Destroy(currentSet);
        }
        yield return new WaitForSeconds(2);
        currentSet = Instantiate(HoholsSet[number], spawnPos, Quaternion.identity);
        //Ciy
    }

}
