using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;

using UnityEngine;

public class GameManager : MonoBehaviour
{
    
    public GameObject line;
    public GameObject TrueLine;
    public static float liney = -4.6f;
    public GameObject currshields;
    public GameObject MaxShield;
    public GameObject[] VeryEasySet;
    public GameObject[] HoholsSetEasy;
    public GameObject[] HoholsSetMed;
    public GameObject[] HoholsSetHard;
    private static bool need_reset;
    public static bool buy_shield;
    private GameObject currentSet;
    private int pred = 0;
    public bool PlayerCanMove;
    private Vector2 spawnPos = new Vector2 (0, 10);
    private Vector2 spawnShield = new Vector2(-2.5f, -3);
    public static GameManager instance;
    
   
    private void Awake()
    {
        if(instance == null)
        {
            instance = this;

        }
        else
        {
            Destroy(gameObject);
        }
        
    }
    public static void CancelGame()
    {
        
        instance.StopAllCoroutines();
        foreach (GameObject a in GameObject.FindGameObjectsWithTag("HBullet"))
            Destroy(a);
        foreach (GameObject a in GameObject.FindGameObjectsWithTag("JBullet"))
            Destroy(a);
        UIManager.ResetVolna();
        MasterOfHohol.allHohols.Clear();
        if(instance.currentSet!= null)
        {
            Destroy(instance.currentSet);
        }
        if (instance.currshields != null)
        {
            Destroy(instance.currshields);
        }
        if (instance.line != null)
        {
            Destroy (instance.line);
        }
        
        UIManager.ResetUI();
    }
    
    public IEnumerator SpawnLine()
    {

        if (instance.line != null)
        {
            Destroy(instance.line);
            
        }
        yield return new WaitForSeconds(2);
       
        Vector2 spawnPos = new Vector2(0, liney);
        instance.line  = Instantiate(TrueLine, spawnPos, Quaternion.identity);
    }
    public static void SpawnNewLine()
    {
        if (liney <= -3.6)
        {
            
            liney += 0.05f;
           
        }
        instance.StartCoroutine(instance.SpawnLine());
    }
    public static void SpawnNewShields()
    {

        instance.StartCoroutine(instance.SpawnShields());

    }
    public static bool is_reset()
    {
        return need_reset;
    }
    public static void set_reset(bool f)
    {
        need_reset = f;
    }
    public static void SpawnNewWave()
    {
       
        MasterOfHohol.allHohols.Clear();
        
        instance.StartCoroutine(instance.SpawnWave());
    }
    private IEnumerator SpawnShields()
    {
        
        if (instance.currshields != null)
        {
            Destroy(instance.currshields);
            
        }
        yield return new WaitForSeconds(2);
        instance.currshields = Instantiate(MaxShield, spawnShield, Quaternion.identity);
    }
    private IEnumerator SpawnWave()
       
    {
        if(UIManager.GetVolna() <= 4)
        {
            int number = Random.Range(0, VeryEasySet.Length);
            while (instance.pred == number)
            {
                number = Random.Range(0, VeryEasySet.Length);
            }
            pred = number;
            spawnPos = VeryEasySet[number].GetComponent<MasterOfHohol>().spawnPos;
            if (currentSet != null)
            {
                Destroy(currentSet);
            }
            yield return new WaitForSeconds(2);
            currentSet = Instantiate(VeryEasySet[number], spawnPos, Quaternion.identity);
        }
       
        else if (UIManager.GetVolna() <= 10 && UIManager.GetVolna() >= 4)
        {
            int number = Random.Range(0, HoholsSetEasy.Length);
            while(instance.pred == number)
            {
                number = Random.Range(0, HoholsSetEasy.Length);
            }
            pred = number;
            spawnPos = HoholsSetEasy[number].GetComponent<MasterOfHohol>().spawnPos;
            if (currentSet != null)
            {
                Destroy(currentSet);
            }
            yield return new WaitForSeconds(2);
            currentSet = Instantiate(HoholsSetEasy[number], spawnPos, Quaternion.identity);
        } else if(UIManager.GetVolna() >=10 && UIManager.GetVolna() <= 20)
        {
            int number = Random.Range(0, HoholsSetEasy.Length);
            while (instance.pred == number)
            {
                number = Random.Range(0, HoholsSetEasy.Length);
            }
            pred = number;
            spawnPos = HoholsSetMed[number].GetComponent<MasterOfHohol>().spawnPos;
            if (currentSet != null)
            {
                Destroy(currentSet);
            }
            yield return new WaitForSeconds(2);
            currentSet = Instantiate(HoholsSetMed[number], spawnPos, Quaternion.identity);
        }
        else
        {
            int number = Random.Range(0, HoholsSetEasy.Length);
            while (instance.pred == number)
            {
                number = Random.Range(0, HoholsSetEasy.Length);
            }
            pred = number;
            spawnPos = HoholsSetHard[number].GetComponent<MasterOfHohol>().spawnPos;
            if (currentSet != null)
            {
                Destroy(currentSet);
            }
            yield return new WaitForSeconds(2);
            currentSet = Instantiate(HoholsSetHard[number], spawnPos, Quaternion.identity);
        }
        
        UIManager.UpdVolna();
       
    }

}
