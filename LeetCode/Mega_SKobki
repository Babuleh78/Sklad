class Solution {
public:
    vector<string> generateParenthesis(int n) {
            string buf;
            vector<string> vec;
            vec.push_back("()");

                            for (int i = 1; i < n; i++) {
                    int size = vec.size();
                    for (int k = 0; k < size; k++) {
                        buf = "(" + vec[k] + ")";
                        vec.push_back(buf);
                        buf = vec[k] + "()";
                        vec.push_back(buf);
                        if (k != size - 1 && size!=1) {
                            buf = "()" + vec[k];
                            vec.push_back(buf);
                        }
                    }
                    for (int k = 0; k < size; k++) {
                        vec.erase(vec.begin());
                    }
                }

            return vec;
    }
};
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<String>();
        recurse(res, 0, 0, "", n);
        return res;
    }
    
    public void recurse(List<String> res, int left, int right, String s, int n) {
        if (s.length() == n * 2) {
            res.add(s);
            return;
        }
        
        if (left < n) {
            recurse(res, left + 1, right, s + "(", n);
        }
        
        if (right < left) {
            recurse(res, left, right + 1, s + ")", n);
        }
    }
	// See above tree diagram with parameters (left, right, s) for better understanding
}
