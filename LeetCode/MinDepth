/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(root == nullptr){
            return 0;
        }
        return Depth(root, 0);
    }
    int Depth(TreeNode* node, int n){
        if(node == nullptr){
            return std::numeric_limits<int>::max();
        }
        if(node->left == nullptr && node->right == nullptr){
            return n+1;
        } else{
            return min(Depth(node->right, n+1), Depth(node->left, n+1));
        }
    }
};
