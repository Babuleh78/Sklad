/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int getMinimumDifference(TreeNode* root) {
        if(root == nullptr){
            return 0;
        }
        vector<int> ans;
        Helper(root, ans);
        sort(ans.begin(), ans.end());
        int n = ans[1] - ans[0];
        for(int i = 2; i<ans.size(); i++){
            n = min(abs(ans[i]-ans[i-1]), n);
        }
        return n;
    }
    void Helper(TreeNode* node, vector<int>& vec){
        if(node == nullptr){
            return;
        }
        Helper(node->left, vec);
        vec.push_back(node->val);
        Helper(node->right, vec);
    }
    
};
